module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateExoplanet {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Exoplanet {
  id: Int!
  name: String!
  hasStation: Boolean
}

type ExoplanetConnection {
  pageInfo: PageInfo!
  edges: [ExoplanetEdge]!
  aggregate: AggregateExoplanet!
}

input ExoplanetCreateInput {
  id: Int
  name: String!
  hasStation: Boolean
}

type ExoplanetEdge {
  node: Exoplanet!
  cursor: String!
}

enum ExoplanetOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  hasStation_ASC
  hasStation_DESC
}

type ExoplanetPreviousValues {
  id: Int!
  name: String!
  hasStation: Boolean
}

type ExoplanetSubscriptionPayload {
  mutation: MutationType!
  node: Exoplanet
  updatedFields: [String!]
  previousValues: ExoplanetPreviousValues
}

input ExoplanetSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ExoplanetWhereInput
  AND: [ExoplanetSubscriptionWhereInput!]
  OR: [ExoplanetSubscriptionWhereInput!]
  NOT: [ExoplanetSubscriptionWhereInput!]
}

input ExoplanetUpdateInput {
  name: String
  hasStation: Boolean
}

input ExoplanetUpdateManyMutationInput {
  name: String
  hasStation: Boolean
}

input ExoplanetWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  hasStation: Boolean
  hasStation_not: Boolean
  AND: [ExoplanetWhereInput!]
  OR: [ExoplanetWhereInput!]
  NOT: [ExoplanetWhereInput!]
}

input ExoplanetWhereUniqueInput {
  id: Int
}

scalar Long

type Mutation {
  createExoplanet(data: ExoplanetCreateInput!): Exoplanet!
  updateExoplanet(data: ExoplanetUpdateInput!, where: ExoplanetWhereUniqueInput!): Exoplanet
  updateManyExoplanets(data: ExoplanetUpdateManyMutationInput!, where: ExoplanetWhereInput): BatchPayload!
  upsertExoplanet(where: ExoplanetWhereUniqueInput!, create: ExoplanetCreateInput!, update: ExoplanetUpdateInput!): Exoplanet!
  deleteExoplanet(where: ExoplanetWhereUniqueInput!): Exoplanet
  deleteManyExoplanets(where: ExoplanetWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  exoplanet(where: ExoplanetWhereUniqueInput!): Exoplanet
  exoplanets(where: ExoplanetWhereInput, orderBy: ExoplanetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Exoplanet]!
  exoplanetsConnection(where: ExoplanetWhereInput, orderBy: ExoplanetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ExoplanetConnection!
  node(id: ID!): Node
}

type Subscription {
  exoplanet(where: ExoplanetSubscriptionWhereInput): ExoplanetSubscriptionPayload
}
`
      }
    